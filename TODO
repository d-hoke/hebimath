Planned for Version 0.6
================================================================================

Low-level Functions:

* add/sub variants for inplace operations and same-sized input
	* change adda/suba to only use a single operand?
	* create addua/subua to add in carry for larger ops?
* port remainder of division implementation to x86-64 assembly
* optimize pclz, almost always called on normalized input
* move most of zsetstr into psetstr backend?

Integer Functions:

* zhamdist
* zpopcount
* zscan0
* zscan1
* zsetbit
* zgcd
* zpow
* zpowu
* zsqrt
* zload
* zsave

Optimize:

* pclz
* ztrunc

Other:

* improve zand, zor and zxor to generate correct results for negative numbers
* test and fix bugs in ztrunc
* create some sample programs
* add a lot more checks/tests
* add documetation and man pages
	* build tool requirements (gmake 4.0+, bmake, awk, etc.)
	* supported compilers
* add hebi_kiss init/destroy functions
* add additional random number generators
* add support for compiler static analysis
	* enable additional warnings and security hardening flags by default
* add support for SEI CERT C validation and perform security audit
	* try out clang-tidy
	* audit all uses of LIKELY/UNLIKELY for assignment/mutation
	* fix security problem with HEBI_HWCAPS, all dispatcher stubs
	  should use SSE2 as default
	* rewrite generic kernels to just use 64-bit limbs, change
	  hebi_packet to a struct instead of a union, would also let the
	  library support big-endian machines as a consequence
	* add configuration macro to enable error-checking mutex/rwlocks
	* add configuration macro for strict MISRA compliance? need to figure
	  out a way to work around lack of abort/setjmp/longjmp error handling.
	  maybe just use hebi_error_last in the same way glGetError is
	  used in OpenGL?
	* add assertion checks for NULL pointers and audit how we compare to
	  NULL to make sure we are consistent throughout the code base
* either get rid of the error domain, or add a C11 threads error domain, need
  to investigate what's best after implementing random functions
* more testing on other Linux and BSD distributions
* more testing with different C compilers and with older versions of compilers
* perform an audit on floating-point values, make sure we aren't using any
  except for when we need to convert to/from these data types
* code cleanup audit, remove any C++ style comments, C++ style pointer
  declarations, trailing whitespace, convert spaces to tabs, etc.
* add support for big-endian machines
* need to add a function to copy or swap, depending on destination allocator,
  for functions like zmul/zdivrem

Future Versions
================================================================================

* add arbitrary precision rationals and floating-point numbers
* add GNU MP style API wrapper header
* add header only C++11/14 library
* port low-level packet backend to AArch64
* port to Android
* port to Mac OS X / iOS
* port to Windows (MinGW, Ubuntu on Windows and MSVC++ w/ Clang frontend)
